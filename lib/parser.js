/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Program":3,"ProgramSection":4,"StatementList":5,"Statement":6,"ExpressionStatement":7,"SEMICOLON":8,"Expression":9,"ChuckExpression":10,"COMMA":11,"expression":12,"ArrowExpression":13,"CHUCK":14,"DeclExpression":15,"ConditionalExpression":16,"TypeDecl":17,"VarDeclList":18,"VarDecl":19,"ID":20,"Literal":21,"NULL":22,"TypeDeclA":23,"TypeDeclB":24,"AT_SYM":25,"LT":26,"IdDot":27,"GT":28,"LogicalOrExpression":29,"LogicalAndExpression":30,"InclusiveOrExpression":31,"ExclusiveOrExpression":32,"AndExpression":33,"EqualityExpression":34,"RelationalExpression":35,"ShiftExpression":36,"AdditiveExpression":37,"MultiplicativeExpression":38,"TildaExpression":39,"CastExpression":40,"UnaryExpression":41,"DurExpression":42,"PostfixExpression":43,"COLONCOLON":44,"PrimaryExpression":45,"NUMBER":46,"$accept":0,"$end":1},
terminals_: {2:"error",8:"SEMICOLON",11:"COMMA",12:"expression",14:"CHUCK",20:"ID",22:"NULL",25:"AT_SYM",26:"LT",27:"IdDot",28:"GT",44:"COLONCOLON",46:"NUMBER"},
productions_: [0,[3,1],[4,1],[5,1],[5,2],[6,1],[7,1],[7,2],[9,1],[9,3],[10,1],[10,3],[13,1],[15,1],[15,2],[18,1],[19,1],[21,1],[17,1],[17,1],[23,1],[23,2],[24,3],[24,4],[16,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[37,1],[38,1],[39,1],[40,1],[41,1],[42,1],[42,3],[43,1],[45,1],[45,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Program([$$[$0]]));
break;
case 2:this.$ = $$[$0];
break;
case 3:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])([$$[$0]]);
break;
case 4:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])([$$[$0-1]].concat($$[$0]));
break;
case 5:this.$ = $$[$0];
break;
case 6:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(void 0);
break;
case 7:this.$ = $$[$0-1];
break;
case 8:this.$ = $$[$0];
break;
case 9:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(prependExpression($$[$0-2], $$[$0]));
break;
case 10:this.$ = $$[$0];
break;
case 11:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.BinaryExpression($$[$0-2], new yy.ChuckOperator(), $$[$0]));
break;
case 12:this.$ = $$[$0];
break;
case 13:this.$ = $$[$0];
break;
case 14:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.DeclarationExpression($$[$0-1], $$[$0], 0));
break;
case 15:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])([$$[$0]]);
break;
case 16:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.VariableDeclaration($$[$0]));
break;
case 17:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.Null);
break;
case 18:this.$ = $$[$0];
break;
case 19:this.$ = $$[$0];
break;
case 20:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.TypeDeclaration($$[$0], 0));
break;
case 21:this.$ = yy.addLocationDataFn(_$[$0-1], _$[$0])(new yy.TypeDeclaration($$[$0-1], 1));
break;
case 22:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.TypeDeclaration($$[$0-1], 0));
break;
case 23:this.$ = yy.addLocationDataFn(_$[$0-3], _$[$0])(new yy.TypeDeclaration($$[$0-2], 1));
break;
case 24:this.$ = $$[$0];
break;
case 25:this.$ = $$[$0];
break;
case 26:this.$ = $$[$0];
break;
case 27:this.$ = $$[$0];
break;
case 28:this.$ = $$[$0];
break;
case 29:this.$ = $$[$0];
break;
case 30:this.$ = $$[$0];
break;
case 31:this.$ = $$[$0];
break;
case 32:this.$ = $$[$0];
break;
case 33:this.$ = $$[$0];
break;
case 34:this.$ = $$[$0];
break;
case 35:this.$ = $$[$0];
break;
case 36:this.$ = $$[$0];
break;
case 37:this.$ = $$[$0];
break;
case 38:this.$ = $$[$0];
break;
case 39:this.$ = yy.addLocationDataFn(_$[$0-2], _$[$0])(new yy.DurExpression($$[$0-2], $$[$0]));
break;
case 40:this.$ = $$[$0];
break;
case 41:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.PrimaryVariableExpression($$[$0]));
break;
case 42:this.$ = yy.addLocationDataFn(_$[$0], _$[$0])(new yy.PrimaryNumberExpression($$[$0]));
break;
}
},
table: [{3:1,4:2,5:3,6:4,7:5,8:[1,6],9:7,10:8,13:9,15:10,16:11,17:12,20:[1,17],23:14,24:15,26:[1,18],29:13,30:16,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:28,41:29,42:30,43:31,45:32,46:[1,33]},{1:[3]},{1:[2,1]},{1:[2,2]},{1:[2,3],5:34,6:4,7:5,8:[1,6],9:7,10:8,13:9,15:10,16:11,17:12,20:[1,17],23:14,24:15,26:[1,18],29:13,30:16,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:28,41:29,42:30,43:31,45:32,46:[1,33]},{1:[2,5],8:[2,5],20:[2,5],26:[2,5],46:[2,5]},{1:[2,6],8:[2,6],20:[2,6],26:[2,6],46:[2,6]},{8:[1,35]},{8:[2,8],11:[1,36],14:[1,37]},{8:[2,10],11:[2,10],14:[2,10]},{8:[2,12],11:[2,12],14:[2,12]},{8:[2,13],11:[2,13],14:[2,13]},{18:38,19:39,20:[1,40]},{8:[2,24],11:[2,24],14:[2,24]},{20:[2,18]},{20:[2,19]},{8:[2,25],11:[2,25],14:[2,25]},{8:[2,41],11:[2,41],14:[2,41],20:[2,20],25:[1,41],44:[2,41]},{27:[1,42]},{8:[2,26],11:[2,26],14:[2,26]},{8:[2,27],11:[2,27],14:[2,27]},{8:[2,28],11:[2,28],14:[2,28]},{8:[2,29],11:[2,29],14:[2,29]},{8:[2,30],11:[2,30],14:[2,30]},{8:[2,31],11:[2,31],14:[2,31]},{8:[2,32],11:[2,32],14:[2,32]},{8:[2,33],11:[2,33],14:[2,33]},{8:[2,34],11:[2,34],14:[2,34]},{8:[2,35],11:[2,35],14:[2,35]},{8:[2,36],11:[2,36],14:[2,36]},{8:[2,37],11:[2,37],14:[2,37],44:[1,43]},{8:[2,38],11:[2,38],14:[2,38],44:[2,38]},{8:[2,40],11:[2,40],14:[2,40],44:[2,40]},{8:[2,42],11:[2,42],14:[2,42],44:[2,42]},{1:[2,4]},{1:[2,7],8:[2,7],20:[2,7],26:[2,7],46:[2,7]},{12:[1,44]},{13:45,15:10,16:11,17:12,20:[1,17],23:14,24:15,26:[1,18],29:13,30:16,31:19,32:20,33:21,34:22,35:23,36:24,37:25,38:26,39:27,40:28,41:29,42:30,43:31,45:32,46:[1,33]},{8:[2,14],11:[2,14],14:[2,14]},{8:[2,15],11:[2,15],14:[2,15]},{8:[2,16],11:[2,16],14:[2,16]},{20:[2,21]},{28:[1,46]},{20:[1,48],43:47,45:32,46:[1,33]},{8:[2,9]},{8:[2,11],11:[2,11],14:[2,11]},{20:[2,22],25:[1,49]},{8:[2,39],11:[2,39],14:[2,39],44:[2,39]},{8:[2,41],11:[2,41],14:[2,41],44:[2,41]},{20:[2,23]}],
defaultActions: {2:[2,1],3:[2,2],14:[2,18],15:[2,19],34:[2,4],41:[2,21],44:[2,9],49:[2,23]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
window.ChuckParser = parser.Parser;
